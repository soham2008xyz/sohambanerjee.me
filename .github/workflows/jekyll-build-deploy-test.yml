# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 1 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site
          path: _site/
      - name: Upload pages artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v4

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}

  # Deploy to surge
  surge:
    environment:
      name: surge
      url: ${{ vars.SURGE_DOMAIN }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v6
        with:
          name: jekyll-site
          path: _site/
      - name: Deploy to Surge
        uses: dswistowski/surge-sh-action@v1
        with:
          domain: ${{ vars.SURGE_DOMAIN }}
          project: _site/
          login: ${{ secrets.SURGE_LOGIN }}
          token: ${{ secrets.SURGE_TOKEN }}
    outputs:
      page_url: ${{ vars.SURGE_DOMAIN }}

  # Run lighthouse checks
  test:
    runs-on: ubuntu-latest
    needs: [deploy, surge]
    strategy:
      fail-fast: false
      matrix:
        device: [ 'desktop', 'mobile' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '20'
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      - name: Run Lighthouse CI
        run: lhci autorun --upload.target=temporary-public-storage --collect.method=psi --collect.url=${{ needs.surge.outputs.page_url }} --collect.psiApiKey=${{ secrets.PSI_API_KEY }} --collect.psiStrategy=${{ matrix.device }}
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
